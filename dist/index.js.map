{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively test whether at least `n` elements in a provided array pass a test implemented by a predicate function, while iterating from right-to-left and assign the results to elements in the provided output array.\n*\n* @private\n* @param {Collection} x - input array\n* @param {PositiveInteger} n - number of elements\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* function fcn( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var out = [ 0, 0, 0, 0, 0 ];\n* var arr = indexed( x, 2, out, 1, 0, fcn );\n* // returns [ false, false, false, false, true ]\n*/\nfunction indexed( x, n, out, stride, offset, predicate, thisArg ) {\n\tvar count;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = false;\n\tcount = 0;\n\tio = offset;\n\tfor ( i = x.length - 1; i >= 0; i-- ) {\n\t\tif ( flg === false && predicate.call( thisArg, x[ i ], i, x ) ) {\n\t\t\tcount += 1;\n\t\t\tif ( count >= n ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\tout[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn out;\n}\n\n/**\n* Cumulatively test whether at least `n` elements in a provided accessor array pass a test implemented by a predicate function, while iterating from right-to-left and assign the results to elements in the accessor output array.\n*\n* @private\n* @param {Object} x - input array object\n* @param {PositiveInteger} n - number of elements\n* @param {Object} out - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* function fcn( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = toAccessorArray( [ 1, 1, 0, 0, 0 ] );\n*\n* var out = toAccessorArray( [ 0, 0, 0, 0, 0 ] );\n* var arr = accessors( arraylike2object( x ), 2, arraylike2object( out ), 1, 0, fcn );\n*\n* var v = arr.get( 4 );\n* // returns true\n*/\nfunction accessors( x, n, out, stride, offset, predicate, thisArg ) {\n\tvar count;\n\tvar xdata;\n\tvar odata;\n\tvar xget;\n\tvar oset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\todata = out.data;\n\n\txget = x.accessors[ 0 ];\n\toset = out.accessors[ 1 ];\n\n\tio = offset;\n\tflg = false;\n\tcount = 0;\n\tfor ( i = xdata.length - 1; i >= 0; i-- ) {\n\t\tif ( flg === false &&\n\t\t\tpredicate.call( thisArg, xget( xdata, i ), i, xdata ) ) {\n\t\t\tcount += 1;\n\t\t\tif ( count >= n ) {\n\t\t\t\tflg = true;\n\t\t\t}\n\t\t}\n\t\toset( odata, io, flg );\n\t\tio += stride;\n\t}\n\treturn odata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively test whether at least `n` elements in a provided array pass a test implemented by a predicate function, while iterating from right-to-left and assign the results to elements in the output array.\n*\n* @param {Collection} x - input array\n* @param {PositiveInteger} n - number of elements\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* function fcn( value ) {\n*     return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0 ];\n*\n* var y = [ false, null, false, null, false, null, false, null ];\n* var out = assign( x, 2, y, 2, 0, fcn );\n* // returns [ false, null, false, null, false, null, true, null ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\nfunction assign( x, n, out, stride, offset, predicate, thisArg ) {\n\tvar xo;\n\tvar oo;\n\n\txo = arraylike2object( x );\n\too = arraylike2object( out );\n\tif (\n\t\txo.accessorProtocol ||\n\t\too.accessorProtocol\n\t) {\n\t\taccessors( xo, n, oo, stride, offset, predicate, thisArg );\n\t\treturn out;\n\t}\n\tindexed( x, n, out, stride, offset, predicate, thisArg );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar filled = require( '@stdlib/array-base-filled' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least `n` elements in a provided array pass a test implemented by a predicate function, while iterating from right-to-left.\n*\n* @param {Collection} x - input array\n* @param {PositiveInteger} n - number of elements\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* function fcn( value ) {\n* \treturn ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var y = cusomeByRight( x, 2, fcn );\n* // returns [ false, false, false, false, true ]\n*/\nfunction cusomeByRight( x, n, predicate, thisArg ) {\n\tvar out = filled( false, x.length );\n\treturn assign( x, n, out, 1, 0, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cusomeByRight;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether at least `n` elements in a provided array pass a test implemented by a predicate function, while iterating from right-to-left.\n*\n* @module @stdlib/array-base-cusome-by-right\n*\n* @example\n* var cusomeByRight = require( '@stdlib/array-base-cusome-by-right' );\n*\n* function fcn( value ) {\n*   return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var y = cusomeByRight( x, 2, fcn );\n* //returns [ false, false, false, false, true ]\n*\n* @example\n* var cusomeByRight = require( '@stdlib/array-base-cusome-by-right' );\n*\n* function fcn( value ) {\n*\t return ( value > 0 );\n* }\n*\n* var x = [ 1, 1, 0, 0, 0 ];\n*\n* var y1 = cusomeByRight( x, 2, fcn );\n* // returns [ false, false, false, false, true ]\n*\n* var y2 = [ false, null, false, null, false, null, false, null, false, null ];\n* var out = cusomeByRight.assign( x, 2, y2, 2, 0, fcn );\n* // returns [ false, null, false, null, false, null, false, null, true, null ]\n*\n* var bool = ( out === y2 );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,qCAAsC,EA6BtE,SAASC,EAASC,EAAGC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,EAAU,CACjE,IAAIC,EACAC,EACAC,EACAC,EAKJ,IAHAF,EAAM,GACND,EAAQ,EACRE,EAAKL,EACCM,EAAIV,EAAE,OAAS,EAAGU,GAAK,EAAGA,IAC1BF,IAAQ,IAASH,EAAU,KAAMC,EAASN,EAAGU,CAAE,EAAGA,EAAGV,CAAE,IAC3DO,GAAS,EACJA,GAASN,IACbO,EAAM,KAGRN,EAAKO,CAAG,EAAID,EACZC,GAAMN,EAEP,OAAOD,CACR,CA+BA,SAASS,EAAWX,EAAGC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,EAAU,CACnE,IAAIC,EACAK,EACAC,EACAC,EACAC,EACAP,EACAC,EACAC,EAWJ,IATAE,EAAQZ,EAAE,KACVa,EAAQX,EAAI,KAEZY,EAAOd,EAAE,UAAW,CAAE,EACtBe,EAAOb,EAAI,UAAW,CAAE,EAExBO,EAAKL,EACLI,EAAM,GACND,EAAQ,EACFG,EAAIE,EAAM,OAAS,EAAGF,GAAK,EAAGA,IAC9BF,IAAQ,IACZH,EAAU,KAAMC,EAASQ,EAAMF,EAAOF,CAAE,EAAGA,EAAGE,CAAM,IACpDL,GAAS,EACJA,GAASN,IACbO,EAAM,KAGRO,EAAMF,EAAOJ,EAAID,CAAI,EACrBC,GAAMN,EAEP,OAAOU,CACR,CA+BA,SAASG,EAAQhB,EAAGC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,EAAU,CAChE,IAAIW,EACAC,EAIJ,OAFAD,EAAKnB,EAAkBE,CAAE,EACzBkB,EAAKpB,EAAkBI,CAAI,EAE1Be,EAAG,kBACHC,EAAG,kBAEHP,EAAWM,EAAIhB,EAAGiB,EAAIf,EAAQC,EAAQC,EAAWC,CAAQ,EAClDJ,IAERH,EAASC,EAAGC,EAAGC,EAAKC,EAAQC,EAAQC,EAAWC,CAAQ,EAChDJ,EACR,CAKAL,EAAO,QAAUmB,ICxLjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,2BAA4B,EAC9CC,EAAS,IAwBb,SAASC,EAAeC,EAAGC,EAAGC,EAAWC,EAAU,CAClD,IAAIC,EAAMP,EAAQ,GAAOG,EAAE,MAAO,EAClC,OAAOF,EAAQE,EAAGC,EAAGG,EAAK,EAAG,EAAGF,EAAWC,CAAQ,CACpD,CAKAP,EAAO,QAAUG,ICIjB,IAAIM,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "arraylike2object", "indexed", "x", "n", "out", "stride", "offset", "predicate", "thisArg", "count", "flg", "io", "i", "accessors", "xdata", "odata", "xget", "oset", "assign", "xo", "oo", "require_main", "__commonJSMin", "exports", "module", "filled", "assign", "cusomeByRight", "x", "n", "predicate", "thisArg", "out", "setReadOnly", "main", "assign"]
}
